#!/usr/bin/env python
import rospy
import rosbag
import rospkg
import numpy as np
import tf
import scipy.ndimage.filters as sp
from lab4.msg import Motion
from lab4.msg import Observation
import math

def my_gaussian(sigma):
	g = np.zeros((3,3,3))
	mu= np.matrix('0; 0; 0')
	cov = np.matrix('1 0 0;0 1 0;0 0 1')
	det_cov=np.linalg.det(cov)
	for i in range(-1,2):
		for j in range(-1,2):
			for k in range(-1,2):
				x=np.matrix('0; 0; 0')
				x[0]=i
				x[1]=j
				x[2]=k
				t1=np.subtract(x, mu)
				t2=t1.transpose()
				ex=np.matrix('0')
				ex=np.dot(t2,cov)
				ex=np.dot(ex,t1)
				num=np.exp((-0.5)*ex[0])
				den=np.sqrt(2*np.pi*det_cov)					
				g[i+1][j+1][k+1]=num/den
	return g

def getAbsLoc(a):
	return float((a*20)+10)

def getGridLoc(a):
	return int(a/20)

def getGridTheta(a):
	return int(a/10)

def getAbsTheta(a):
	return float(a*10+5)

def getTagPos(tag):
	if tag==0:
		x=125
		y=525
	elif tag==1:
		x=125
		y=325
	elif tag==2:
		x=125
		y=125
	elif tag==3:
		x=425
		y=125
	elif tag==4:
		x=425
		y=325
	else:
		x=425
		y=525
	return x,y				

def talker():
    #pub = rospy.Publisher('chatter', String, queue_size=10)
    rospy.init_node('talker', anonymous=True)
    #rate = rospy.Rate(10) # 10hz
    while not rospy.is_shutdown():
        #hello_str = "hello world %s" % rospy.get_time()
        #rospy.loginfo(hello_str)
        #pub.publish(hello_str)
        


	rospack = rospkg.RosPack()
	bag = rosbag.Bag(rospack.get_path('lab4')+'/bag/grid.bag')
	state = np.zeros((35,35,36))
	state[11][27][20]=1
	count=0
	for topic, msg, t in bag.read_messages(topics=['Movements', 'Observations']):
		#count=count+1
		#if count==60:
		#	break
		#print msg
		if msg.timeTag%2!=0:
		
			quaternion = (msg.rotation1.x, msg.rotation1.y, msg.rotation1.z, msg.rotation1.w)
			euler = tf.transformations.euler_from_quaternion(quaternion)
			theta1=euler[2]
			theta1=math.degrees(theta1)
			quaternion = (msg.rotation2.x, msg.rotation2.y, msg.rotation2.z, msg.rotation2.w)
			euler = tf.transformations.euler_from_quaternion(quaternion)
			theta2=euler[2]
			theta2=math.degrees(theta2) 
			#print math.degrees(theta2)
			#print msg.translation
			#Adding the deviation
			gaussian=[0.157731,0.684538,0.157731]
			state_temp = np.zeros((35,35,36))

			#Shifting probabilities
			for i in range(35):
		    		for j in range(35):
					for k in range(36):
						if state[i][j][k]>0:
							d=getAbsTheta(k)+theta1
							dx=msg.translation*100*math.cos(math.radians(d))
							dy=msg.translation*100*math.sin(math.radians(d))
							x=dx+getAbsLoc(i)
							y=dy+getAbsLoc(j)
							theta=getAbsTheta(k)+theta1+theta2
							if theta<0:
								theta=theta+360
							if theta>360:
								theta=theta-360
							if theta==360:
								theta=0
							y=getGridLoc(y)
							x=getGridLoc(x)
							theta_final=math.radians(theta)
							theta=getGridTheta(theta)
							state_temp[x][y][theta]=state_temp[x][y][theta]+state[i][j][k]
							print 'motion '+str(x)+' '+str(y)
		
			#blurred = sp.gaussian_filter(state_temp, sigma=1, truncate=1.0)
	
			#state=blurred
			#c=0
			#for i in range(35):
	    		#	for j in range(35):
			#		for k in range(36):
			#			if state[i][j][k]>0:
			#				print 'i ' + str(i) +' j '+str(j)+' k '+str(k)
			#				print state[i][j][k]
			#				c=c+1
			#				print c
			#Applying gaussian
			state=state_temp
			
			#break
		else:
			quaternion = (msg.bearing.x, msg.bearing.y, msg.bearing.z, msg.bearing.w)
			euler = tf.transformations.euler_from_quaternion(quaternion)
			theta=euler[2]
			#theta=math.degrees(theta)
			#print theta

			tag_x, tag_y=getTagPos(msg.tagNum)
			#print tag_x
			#print tag_y
			#print math.degrees(theta_final)
			#print math.degrees(theta)
			#print msg.range*100
			dx=msg.range*100*math.cos(theta+theta_final)
			dy=msg.range*100*math.sin(theta+theta_final)
			x=tag_x-dx
			y=tag_y-dy
			#print x
			#print y
			x=getGridLoc(x)
			y=getGridLoc(y)
			#print 'tag'+str(msg.tagNum)
			print 'observation '+str(x)+' '+str(y)
	#print state[5][28]
		#break
	g = np.zeros((3,3,3))
	g=my_gaussian(1)
	#print g
	#c=0
	#blurred = sp.gaussian_filter(state, sigma=1, truncate=1.0)
	#for i in range(35):
	 #   	for j in range(35):
	#		for k in range(36):
	#			if state[i][j][k]>0:
	#				print 'i ' + str(i) +' j '+str(j)+' k '+str(k)
	#				print state[i][j][k]
	#				c=c+1
	#				print c

	bag.close()
	rate.sleep()
if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass



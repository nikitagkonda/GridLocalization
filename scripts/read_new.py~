#!/usr/bin/env python
import rosbag
import rospkg
import numpy as np
import tf
import scipy.stats as sp
from lab4.msg import Motion
from lab4.msg import Observation
import math

from interactive_markers.interactive_marker_server import *
from visualization_msgs.msg import *

def getAbsLoc(a):
	return float((a*20)+10)

def getGridLoc(a):
	a=round(a/20)
	if a>=35:
		a=34
	if a<=-1:
		a=0
	return a
	
def getGridTheta(a):
	return int(a/10)

def getAbsTheta(a):
	return float(a*10+5)

def getTagPos(tag):
	if tag==0:
		x=125
		y=525
	elif tag==1:
		x=125
		y=325
	elif tag==2:
		x=125
		y=125
	elif tag==3:
		x=425
		y=125
	elif tag==4:
		x=425
		y=325
	else:
		x=425
		y=525
	return x,y				

rospack = rospkg.RosPack()
bag = rosbag.Bag(rospack.get_path('lab4')+'/bag/grid.bag')
state = np.zeros((35,35,36))
state[11][27][20]=1
count=0

g1=np.zeros((3,3,3))
g2=np.zeros((3,3,3))
for i in range(0,3):
	for j in range(0,3):
		for k in range(0,3):
			g1[i][j][k]=sp.multivariate_normal.pdf([i,j,k],[1,1,1],[[1,0,0],[0,1,0],[0,0,1]])
			g2[i][j][k]=sp.multivariate_normal.pdf([i,j,k],[1,1,1],[[1,0,0],[0,1,0],[0,0,1]])

#print np.multiply(2,g1)

for topic, msg, t in bag.read_messages(topics=['Movements', 'Observations']):
	#count=count+1
	#if count==8:
	#	break
	#print msg
	if msg.timeTag%2!=0:
		
		quaternion = (msg.rotation1.x, msg.rotation1.y, msg.rotation1.z, msg.rotation1.w)
		euler = tf.transformations.euler_from_quaternion(quaternion)
		theta1=euler[2]
		theta1=math.degrees(theta1)
		quaternion = (msg.rotation2.x, msg.rotation2.y, msg.rotation2.z, msg.rotation2.w)
		euler = tf.transformations.euler_from_quaternion(quaternion)
		theta2=euler[2]
		theta2=math.degrees(theta2) 
		#print math.degrees(theta2)
		#print msg.translation
		#Adding the deviation

		state_temp = np.zeros((35,35,36))

		#Shifting probabilities
		for i in range(35):
	    		for j in range(35):
				for k in range(36):
					if state[i][j][k]>0:
						d=getAbsTheta(k)+theta1
						dx=msg.translation*100*math.cos(math.radians(d))
						dy=msg.translation*100*math.sin(math.radians(d))
						x=dx+getAbsLoc(i)
						y=dy+getAbsLoc(j)
						theta=getAbsTheta(k)+theta1+theta2
						if theta<0:
							theta=theta+360
						if theta>360:
							theta=theta-360
						if theta==360:
							theta=0
						
						x=getGridLoc(x)
						y=getGridLoc(y)
						#theta_final=math.radians(theta)
						theta=getGridTheta(theta)
						state_temp[x][y][theta]=state_temp[x][y][theta]+state[i][j][k]

		#Apply gaussian
		state_g = np.zeros((35,35,36))
		for i in range(1,34):
	    		for j in range(1,34):
				for k in range(1,35):
					if state_temp[i][j][k]>0:
						val=state_temp[i][j][k]
						inter=np.multiply(val,g1)
						for p,l in zip(range(i-1,i+2),range(3)):
							for q,m in zip(range(j-1,j+2),range(3)):
								for r,n in zip(range(k-1,k+2),range(3)):
									state_g[p][q][r]=state_g[p][q][r]+inter[l][m][n]
		#c=0
		#for i in range(35):
	 	#   	for j in range(35):
		#		for k in range(36):
		#			if state_g[i][j][k]>0:
		#				print 'i ' + str(i) +' j '+str(j)+' k '+str(k)
		#				print state_g[i][j][k]
		#				c=c+1
		#				print c
						
		#state=state_g
		max_ind=np.unravel_index(state_g.argmax(), state_g.shape)
		print 'motion '+str(msg.timeTag)+': '+str(max_ind)
			
	else:
		quaternion = (msg.bearing.x, msg.bearing.y, msg.bearing.z, msg.bearing.w)
		euler = tf.transformations.euler_from_quaternion(quaternion)
		b_angle=euler[2]

		max_g=np.unravel_index(state_g.argmax(), state_g.shape)
		r_angle=getAbsTheta(max_g[2])
		r_angle=math.radians(r_angle)
		tag_x, tag_y=getTagPos(msg.tagNum)
		dx=msg.range*100*math.cos(b_angle+r_angle)
		dy=msg.range*100*math.sin(b_angle+r_angle)
		x=tag_x-dx
		y=tag_y-dy
		x=getGridLoc(x)
		y=getGridLoc(y)
		
		theta_obs=getGridTheta(math.degrees(r_angle))
		state_obs=np.zeros((35,35,36))
		state_obs[x][y][theta_obs]=1
		
		#Applying gaussian
		state_obs_g = np.zeros((35,35,36))
		for i in range(1,34):
	    		for j in range(1,34):
				for k in range(1,35):
					if state_obs[i][j][k]>0:
						val=state_obs[i][j][k]
						inter=np.multiply(val,g2)
						for p,l in zip(range(i-1,i+2),range(3)):
							for q,m in zip(range(j-1,j+2),range(3)):
								for r,n in zip(range(k-1,k+2),range(3)):
									state_obs_g[p][q][r]=state_obs_g[p][q][r]+inter[l][m][n]
		

		#state=np.add(state_obs_g,state_g)
		#state=np.divide(state,2.)
		max_indices=np.unravel_index(state.argmax(), state.shape)
		print 'observation '+str(msg.timeTag)+': '+str(max_indices)
bag.close()




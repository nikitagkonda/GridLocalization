#!/usr/bin/env python
import rosbag
import rospkg
import numpy as np
import tf
from lab4.msg import Motion
from lab4.msg import Observation
import math

def getAbsLoc(a):
	return float((a*20)+10)

def getGridLoc(a):
	return int(a/20)

def getGridTheta(a):
	return int(a/10)

def getAbsTheta(a):
	return float(a*10+5)

rospack = rospkg.RosPack()
bag = rosbag.Bag(rospack.get_path('lab4')+'/bag/grid.bag')
pos = np.zeros((35,35))
theta = np.zeros((36))
pos[11][27]=1
theta[20]=1
for topic, msg, t in bag.read_messages(topics=['Movements', 'Observations']):
	print msg.rotation1
	quaternion = (msg.rotation1.x, msg.rotation1.y, msg.rotation1.z, msg.rotation1.w)
	euler = tf.transformations.euler_from_quaternion(quaternion)
	theta1=euler[2]
	theta1=math.degrees(theta1)
	print theta1

	#Adding the deviation
	theta_temp = np.zeros((36))
	for i, val in enumerate(theta):
		if val>0:
			d=getAbsTheta(i)+theta1
			theta_temp[getGridTheta(d)]=theta_temp[getGridTheta(d)]+theta[i]
	theta=theta_temp
	
	#Applying gaussian		
	theta_temp = np.zeros((36))
	for i, val in enumerate(theta):
		if val>0:
			print i
			theta_temp[i-1]=theta_temp[i-1]+val*0.15
			if i==35:
				theta_temp[0]=theta_temp[0]+val*0.15
			else:
				theta_temp[i+1]=theta_temp[i+1]+val*0.15
			theta_temp[i]=theta_temp[i]+val*0.7
	theta=theta_temp

	#Translation
	for i, val in enumerate(theta):
		if val>0:
			
	print theta
	break
bag.close()



